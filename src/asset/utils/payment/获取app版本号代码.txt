

 <form action="http://m.lk.cn/pay" method="post" id="frm_paying_order" >                              
                <input type="hidden" id="signature" name="signature" value="4e0ef6a8e7039ea84e8baa02770cfff2"/> 
		<input type="hidden" id="orderid" name="orderid"  value="231402"/>
                <input type="hidden" id="orderno" name="orderno" value="LG659783629813343231"/>
                <!-- liuyanwei add 2018-3-14 添加Android版本-->
                <input type="hidden" id="android_app_version" name="android_app_version" value="0"/>
                <!-- 2018/6/22 xdg 添加app包名-->
                <input type="hidden" id="app_name" name="app_name" value=""/>
 		<input type="radio" id="payingtype2" name="payingtype" value="alipay">
</form>





<script>
	// 2018/6/22 xdg 添加app包名
	function getVersionAndNameForIos(app_intro){

		var Base = new Base64();
		var jsonobj = jQuery.parseJSON(Base.decode(app_intro));
		if($("#android_app_version").length>0){
			$("#android_app_version").val(jsonobj.version);
		}
		if($("#app_name").length>0){
			$("#app_name").val(jsonobj.name);
		}
	}

	function Base64() {  
   
	    // private property  
	    _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";  
	   
	    // public method for encoding  
	    this.encode = function (input) {  
	        var output = "";  
	        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;  
	        var i = 0;  
	        input = _utf8_encode(input);  
	        while (i < input.length) {  
	            chr1 = input.charCodeAt(i++);  
	            chr2 = input.charCodeAt(i++);  
	            chr3 = input.charCodeAt(i++);  
	            enc1 = chr1 >> 2;  
	            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);  
	            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);  
	            enc4 = chr3 & 63;  
	            if (isNaN(chr2)) {  
	                enc3 = enc4 = 64;  
	            } else if (isNaN(chr3)) {  
	                enc4 = 64;  
	            }  
	            output = output +  
	            _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +  
	            _keyStr.charAt(enc3) + _keyStr.charAt(enc4);  
	        }  
	        return output;  
	    }  
	   
	    // public method for decoding  
	    this.decode = function (input) {  
	        var output = "";  
	        var chr1, chr2, chr3;  
	        var enc1, enc2, enc3, enc4;  
	        var i = 0;  
	        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");  
	        while (i < input.length) {  
	            enc1 = _keyStr.indexOf(input.charAt(i++));  
	            enc2 = _keyStr.indexOf(input.charAt(i++));  
	            enc3 = _keyStr.indexOf(input.charAt(i++));  
	            enc4 = _keyStr.indexOf(input.charAt(i++));  
	            chr1 = (enc1 << 2) | (enc2 >> 4);  
	            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);  
	            chr3 = ((enc3 & 3) << 6) | enc4;  
	            output = output + String.fromCharCode(chr1);  
	            if (enc3 != 64) {  
	                output = output + String.fromCharCode(chr2);  
	            }  
	            if (enc4 != 64) {  
	                output = output + String.fromCharCode(chr3);  
	            }  
	        }  
	        output = _utf8_decode(output);  
	        return output;  
	    }  
	   
	    // private method for UTF-8 encoding  
	    _utf8_encode = function (string) {  
	        string = string.replace(/\r\n/g,"\n");  
	        var utftext = "";  
	        for (var n = 0; n < string.length; n++) {  
	            var c = string.charCodeAt(n);  
	            if (c < 128) {  
	                utftext += String.fromCharCode(c);  
	            } else if((c > 127) && (c < 2048)) {  
	                utftext += String.fromCharCode((c >> 6) | 192);  
	                utftext += String.fromCharCode((c & 63) | 128);  
	            } else {  
	                utftext += String.fromCharCode((c >> 12) | 224);  
	                utftext += String.fromCharCode(((c >> 6) & 63) | 128);  
	                utftext += String.fromCharCode((c & 63) | 128);  
	            }  
	   
	        }  
	        return utftext;  
	    }  
	   
	    // private method for UTF-8 decoding  
	    _utf8_decode = function (utftext) {  
	        var string = "";  
	        var i = 0;  
	        var c = c1 = c2 = 0;  
	        while ( i < utftext.length ) {  
	            c = utftext.charCodeAt(i);  
	            if (c < 128) {  
	                string += String.fromCharCode(c);  
	                i++;  
	            } else if((c > 191) && (c < 224)) {  
	                c2 = utftext.charCodeAt(i+1);  
	                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));  
	                i += 2;  
	            } else {  
	                c2 = utftext.charCodeAt(i+1);  
	                c3 = utftext.charCodeAt(i+2);  
	                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));  
	                i += 3;  
	            }  
	        }  
	        return string;  
	    }  
	}  

	$(document).ready(function(){
		<?php if ($D->android_app && $this->request[0] == 'orderform'){ ?>
			var app_intro = window.LanCareWeb.getVersion();
			if (app_intro) {
				var jsonobj = jQuery.parseJSON(app_intro);
				if($("#android_app_version").length>0){
					$("#android_app_version").val(jsonobj.ver);
				}
				if($("#app_name").length>0){
					$("#app_name").val(jsonobj.packageName);
				}
			}
			
		<?php }?>
		<?php if ($D->ios_app && $this->request[0] == 'orderform'){ ?>
			window.webkit.messageHandlers.Lancare.postMessage('getVersionAndName');
		<?php }?>
	});
	
</script>

//php 获取手机类型  IOS or ANDROID


$D->ios_app = false;
$D->android_app = false;

$devide_type = getdevicetype();
if (in_array($devide_type, array('IPHONE', 'IPAD', 'IOSAPP'))) {

    $D->ios_app = true;
}
if (in_array($devide_type, array('ANDROIDAPP', 'ANDROID'))) {

    $D->android_app = true;
}

